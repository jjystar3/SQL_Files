CREATE TABLE DEPT (
	DEPT_NO INT COMMENT '부서번호',
	DEPT_NAME VARCHAR(20) COMMENT '부서명',
	LOCATION VARCHAR(5) COMMENT '위치'
);

INSERT INTO DEPT 
VALUES(1, '인사부', '3층');
INSERT INTO DEPT 
VALUES(2, '홍보부', '1층');
INSERT INTO DEPT 
VALUES(3, '개발부', '2층');
INSERT INTO DEPT
VALUES(NULL, '임시부서', '2층');

CREATE TABLE EMP (
	EMP_NO INT COMMENT '직원번호',
	EMP_NAME VARCHAR(20) COMMENT '직원명',
	EMP_RANK VARCHAR(20) COMMENT '직급',
	DEPT_NO INT COMMENT '부서번호'
);

INSERT INTO EMP
VALUES(1001, '둘리', '사원', 1);
INSERT INTO EMP
VALUES(1002, '또치', '대리', 2);
INSERT INTO EMP
VALUES(1003, '도우너', '대리', 3);
INSERT INTO EMP
VALUES(1004, '고길동', '과장', 3);
INSERT INTO EMP
VALUES(1005, '마이콜', '부장', NULL);


-- 모든 컬럼 가져오기
SELECT *
FROM EMP
JOIN DEPT
ON
EMP.DEPT_NO = DEPT.DEPT_NO;
-- 부서번호를 기준으로 두 테이블 연결

-- 보고싶은 컬럼만 선택하여 가져오기
SELECT EMP.EMP_NO , EMP.EMP_NAME , EMP.DEPT_NO , DEPT.DEPT_NAME
FROM EMP
JOIN DEPT
ON
EMP.DEPT_NO = DEPT.DEPT_NO;

-- 어떤 테이블의 컬럼인지 명시하지 않아서 에러남
SELECT EMP_NO , DEPT_NO
FROM EMP
JOIN DEPT
ON
EMP.DEPT_NO = DEPT.DEPT_NO;

SELECT T1.EMP_NO , T2.DEPT_NO
FROM EMP T1
JOIN DEPT T2
ON
T1.DEPT_NO = T2.DEPT_NO;

-- 사원과 부서 테이블을 공통컬럼없이 그냥 조인하기
SELECT *
FROM EMP, DEPT;
-- 테이블1의 row * 테이블2의 row 만큼 가져온다
-- 4*5 = 20행

-- 부서가 없는 사원을 포함하여 사원정보 가져오기
SELECT *
FROM EMP
LEFT JOIN DEPT 
ON
EMP.DEPT_NO = DEPT.DEPT_NO;

-- 부서번호가 없는 부서도 포함하여 사원정보 가져오기
SELECT *
FROM EMP
RIGHT JOIN DEPT 
ON
EMP.DEPT_NO = DEPT.DEPT_NO;

-- 테이블 정규화
-- 특정 데이터만 보관하도록 테이블을 쪼개는 것
-- 장점: 중복된 데이터는 허용하지 않음으로써, DB의 용량을 줄일 수 있음
-- 단점: 데이터를 한번에 조회할 때, JOIN이 필요함

-- Q1
CREATE TABLE CINEMA (
	THEATER_NO INT COMMENT '상영관번호',
	LOCATION VARCHAR(100) COMMENT '위치',
	TEL VARCHAR(50) COMMENT '전화번호'
);

INSERT INTO CINEMA
VALUES(1, '송도점', '032-111-1111'),(2, '구월점', '032-222-2222');

-- Q2
CREATE TABLE MOVIE (
	THEATER_NO INT COMMENT '상영관번호',
	MOVIE_NAME VARCHAR(20) COMMENT '영화명'
);

INSERT INTO MOVIE
VALUES
(1, '슬램덩크'),
(1, '교섭'),
(2, '슬램덩크'),
(2, '아바타2'),
(2, '영웅');

-- Q3
SELECT C.THEATER_NO , C.LOCATION , M.MOVIE_NAME 
FROM CINEMA C
JOIN MOVIE M
ON
C.THEATER_NO = M.THEATER_NO ;

-- Q4
SELECT M.THEATER_NO , M.MOVIE_NAME , R.USER_NAME 
FROM MOVIE M
JOIN RESERVATION R 
ON
M.MOVIE_NAME = R.MOVIE_NAME ;

-- Q5
CREATE TABLE PURCHASE (
	PURCHASE_DATE DATE NOT NULL COMMENT '구매일자',
	PRODUCT_NO INT NOT NULL COMMENT '상품번호'
);

INSERT INTO PURCHASE
VALUES
('2024-01-05', 1),
('2024-01-05', 2),
('2024-01-11', 3),
('2024-01-20', 5),
('2024-01-25', 5),
('2024-02-02', 2),
('2024-02-07', 3),
('2024-02-11', 5),
('2024-02-12', 6);

-- Q6
SELECT P1.CATEGORY AS '카테고리', COUNT(*) AS '판매건수'
FROM PRODUCT P1
RIGHT JOIN PURCHASE P2 
ON
P1.PRODUCT_NO = P2.PRODUCT_NO 
GROUP BY P1.CATEGORY ;

SELECT CONCAT(P1.CATEGORY, ': ', COUNT(*)) AS '제일많이 팔린 품목'
FROM PRODUCT P1
RIGHT JOIN PURCHASE P2 
ON
P1.PRODUCT_NO = P2.PRODUCT_NO
GROUP BY P1.CATEGORY
ORDER BY COUNT(*) DESC
LIMIT 1;

-- Q7
SELECT P1.PRODUCT_NO AS '상품번호' , P1.PRODUCT_NAME AS '상품명', GROUP_CONCAT(P2.PURCHASE_DATE ORDER BY P2.PURCHASE_DATE) AS '판매날짜'
FROM PRODUCT P1
RIGHT JOIN PURCHASE P2 
ON
P1.PRODUCT_NO = P2.PRODUCT_NO
GROUP BY P1.PRODUCT_NAME
ORDER BY P1.PRODUCT_NO;

-- Q8
CREATE TABLE ATTENDANCE (
	EMP_NO INT NOT NULL COMMENT '사원번호',
	ATT_DATE DATE NOT NULL COMMENT '출석 체크한 날',
	ATT_TIME TIME NOT NULL COMMENT '출석 체크한 시간'
);
INSERT INTO ATTENDANCE
VALUES
(1001, '2024-04-25', '08:50:00'),
(1002, '2024-04-25', '08:55:00'),
(1003, '2024-04-25', '09:01:00'),
(1004, '2024-04-25', '09:05:00'),
(1005, '2024-04-25', '11:20:00'),
(1001, '2024-04-26', '08:58:00'),
(1002, '2024-04-26', '08:59:00'),
(1003, '2024-04-26', '09:30:00'),
(1004, '2024-04-26', '09:03:00'),
(1005, '2024-04-26', '10:50:00');

-- Q9
SELECT A.ATT_DATE AS '날짜', GROUP_CONCAT(E.EMP_NAME) AS '지각자명단'
FROM EMP E 
LEFT JOIN ATTENDANCE A 
ON
E.EMP_NO = A.EMP_NO
WHERE A.ATT_TIME > '09:10:00'
GROUP BY A.ATT_DATE
ORDER BY A.ATT_DATE, E.EMP_NAME;
-- SELECT > JOIN + ON > WHERE > GROUP BY 순서 중요

-- Q10
SELECT D.DEPT_NO AS '부서번호' , D.DEPT_NAME AS '부서명' , COUNT(*) AS '지각건수'
FROM EMP E
JOIN ATTENDANCE A 
ON
E.EMP_NO = A.EMP_NO
JOIN DEPT D 
ON
E.DEPT_NO = D.DEPT_NO
WHERE D.DEPT_NO = 3
AND MONTH(A.ATT_DATE) = 4
AND A.ATT_TIME > '09:10:00';



-- 테이블 반정규화
-- 내용이 중복되더라도 테이블을 하나로 만드는 것
-- 장점: 조회가 편함
-- 단점: DB의 용량이 늘어남

CREATE TABLE TEMP (
	THEATER_NO INT COMMENT '상영관번호',
	LOCATION VARCHAR(100) COMMENT '위치',
	TEL VARCHAR(50) COMMENT '전화번호',
	MOVIE_NAME VARCHAR(20) COMMENT '영화명'
);

INSERT INTO TEMP 
VALUES
(1, '송도점', '032-111-1111', '슬램덩크'),
(1, '송도점', '032-111-1111', '교섭'),
(2, '구월점', '032-222-2222', '슬램덩크'),
(2, '구월점', '032-222-2222', '아바타2'),
(2, '구월점', '032-222-2222', '영웅');





